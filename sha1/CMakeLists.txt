# This file is auto-generated by Xilinx Gauntlet System. Do not edit!
cmake_minimum_required(VERSION 2.8)

#project name
project(sha1_host.exe)


##SET(CMAKE_C_COMPILER xlc)
##SET(CMAKE_CXX_COMPILER xlc++)

###############################
# Custom find modules
###############################
MESSAGE( STATUS "CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR} )

##parent dir
get_filename_component(PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR} PATH)
get_filename_component(PARENT_DIR ${PARENT_DIR} PATH)
MESSAGE( STATUS "PARENT_DIR: " ${PARENT_DIR})

##common
set(GAUNTLET_COMMON_SRC ${GAUNTLET_COMMON_SRC} "${PARENT_DIR}/common/")
MESSAGE( STATUS "GAUNTLET_COMMON_SRC: " ${GAUNTLET_COMMON_SRC})

##cmake
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PARENT_DIR}/cmake/")
#set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} src/3rdparty/xirpower)


###############################
# Find OpenCL
###############################
find_package(OpenCL REQUIRED)
include_directories(${OPENCL_INCLUDE_DIRS})
link_directories(${OPENCL_LIBRARY_DIRS})
add_definitions(${OPENCL_DEFINITIONS})
if(NOT OPENCL_FOUND)
	message(ERROR " OPENCL not found!")
endif(NOT OPENCL_FOUND)


###############################
# Find ZeroMQ
###############################
find_package(ZeroMQ REQUIRED)
include_directories(${ZeroMQ_INCLUDE_DIRS})
link_directories(${ZeroMQ_LIBRARY_DIRS})
if(NOT ZEROMQ_FOUND)
	message(ERROR " ZEROMQ not found!")
endif(NOT ZEROMQ_FOUND)

###############################
# Other include paths
###############################
include_directories(src ${GAUNTLET_COMMON_SRC} ${GAUNTLET_COMMON_SRC}/3rdparty/jsonxx )


###############################
# Add source files
###############################
file(GLOB SRC
	src/main.cpp
	src/sha1.cpp
	src/sha1.h
	${GAUNTLET_COMMON_SRC}/base.h	
	${GAUNTLET_COMMON_SRC}/cmdlineparser.cpp
	${GAUNTLET_COMMON_SRC}/cmdlineparser.h
	${GAUNTLET_COMMON_SRC}/profiler.cpp
	${GAUNTLET_COMMON_SRC}/profiler.h
	${GAUNTLET_COMMON_SRC}/logger.cpp
	${GAUNTLET_COMMON_SRC}/logger.h	
	${GAUNTLET_COMMON_SRC}/benchapp.cpp
	${GAUNTLET_COMMON_SRC}/benchapp.h
	${GAUNTLET_COMMON_SRC}/3rdparty/jsonxx/jsonxx.h
	${GAUNTLET_COMMON_SRC}/3rdparty/jsonxx/jsonxx.cc
	)

###############################
# Add definitions
###############################
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

###############################
# Linking
###############################
add_executable(sha1_host.exe ${SRC})
target_link_libraries(sha1_host.exe ${OPENCL_LIBRARIES} ${ZeroMQ_LIBRARY_DIRS} crypto ssl)
