# This file is auto-generated by Xilinx Gauntlet System. Do not edit!
cmake_minimum_required(VERSION 2.8)

#project name
project(huffman_host.exe)

###############################
# Custom find modules
###############################
MESSAGE( STATUS "CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR} )

##parent dir
##get_filename_component(PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR} PATH)
##get_filename_component(PARENT_DIR ${PARENT_DIR} PATH)
set(PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
MESSAGE( STATUS "PARENT_DIR: " ${PARENT_DIR})

##common
#set(GAUNTLET_COMMON_SRC ${GAUNTLET_COMMON_SRC} "${PARENT_DIR}/common/")
#MESSAGE( STATUS "GAUNTLET_COMMON_SRC: " ${GAUNTLET_COMMON_SRC})

##cmake
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PARENT_DIR}/cmake/")
#set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} src/3rdparty/xirpower)

#opencl path                    
set(XILINX_SDACCEL "/proj/xbuilds/2015.4_sdaccel_daily_latest/installs/lin64/SDAccel/2015.4")
set(OpenCL_INCPATH ${XILINX_SDACCEL}/runtime/include/1_2/)
set(OpenCL_LIBPATH ${XILINX_SDACCEL}/runtime/lib/x86_64/)
MESSAGE( STATUS "OpenCL_INCPATH=" ${OpenCL_INCPATH})
MESSAGE( STATUS "OpenCL_LIBPATH=" ${OpenCL_LIBPATH})

###############################
# Find OpenCL
###############################
find_package(OpenCL REQUIRED)
include_directories(${OPENCL_INCLUDE_DIRS})
link_directories(${OPENCL_LIBRARY_DIRS})
add_definitions(${OPENCL_DEFINITIONS})
if(NOT OPENCL_FOUND)
	message(ERROR " OPENCL not found!")
endif(NOT OPENCL_FOUND)


###############################
# Other include paths
###############################
include_directories(src )


###############################
# Add source files
###############################
file(GLOB SRC
	src/xcl.h
	src/xcl.c
	src/bit_io.h
	src/bit_io.cpp
	src/huffmanapp.h
	src/huffmanapp.cpp
	src/huffmancodec.h
	src/huffmancodec.cpp
	src/huffmancodec_opencl_cpu.h
	src/huffmancodec_opencl_cpu.cpp
	src/main.cpp	
	)

###############################
# Add definitions
###############################
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

###############################
# Linking
###############################
add_executable(huffman_host.exe ${SRC})
target_link_libraries(huffman_host.exe ${OPENCL_LIBRARIES} ${ZeroMQ_LIBRARY_DIRS} crypto ssl)
